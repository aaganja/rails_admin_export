- params = request.params.except(:action, :controller, :utf8, :page, :per_page, :format, :authenticity_token)
- visible_fields = @model_config.export.with(view: self, object: @abstract_model.model.new, controller: self.controller).visible_fields

- if @abstract_model.model==TweetMetric && params["f"].nil?
  :ruby
    require 'rails_admin/config/fields/types/datetime.rb'
    query = params[:query]
    params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)
    params.delete(:query) if params[:query].blank?
    params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'
    sort_reverse = params[:sort_reverse]
    sort = params[:sort]
    params.delete(:sort) if params[:sort] == @model_config.list.sort_by.to_s

    export_action = RailsAdmin::Config::Actions.find(:export, { controller: self.controller, abstract_model: @abstract_model })
    export_action = nil unless export_action && authorized?(export_action.authorization_key, @abstract_model)

    properties = @model_config.list.with(controller: self.controller, view: self, object: @abstract_model.model.new).visible_fields
    # columns paginate
    @filterable_fields = @model_config.list.fields.select(&:filterable?)
    sets = get_column_sets(properties)
    properties = sets[params[:set].to_i] || []
    other_left = ((params[:set].to_i - 1) >= 0) && sets[params[:set].to_i - 1].present?
    other_right = sets[params[:set].to_i + 1].present?
    @index = 0
    @ordered_filters = (params[:f] || @model_config.list.filters).inject({}) { |memo, filter|
      field_name = filter.is_a?(Array) ? filter.first : filter
    (filter.is_a?(Array) ? filter.last : { (@index += 1) => { "v" => '' } }) .each do |index, filter_hash|
        unless filter_hash['disabled']
          memo[index] = { field_name => filter_hash }
        else
          params[:f].delete(field_name)
        end
      end
      memo
    }.to_a.sort_by(&:first)

    @ordered_filter_string = @ordered_filters.map do |duplet|
      filter_index = duplet[0]
      filter_for_field = duplet[1]
      filter_name = filter_for_field.keys.first
      filter_hash = filter_for_field.values.first
      field = @filterable_fields.find{ |field| field.name == filter_name.to_sym }
      field_options = case field.type
      when :enum
        options_for_select(field.with(object: @abstract_model.model.new).enum, filter_hash['v'])
      else
        ''
      end
      %{
        $.filters.append(#{field.label.to_json}, #{field.name.to_json}, #{field.type.to_json}, #{filter_hash['v'].to_json}, #{filter_hash['o'].to_json}, #{field_options.to_json}, #{filter_index.to_json});
      }
    end.join.html_safe if @ordered_filters


  = content_for :contextual_tabs do
    = bulk_menu
    - if @filterable_fields.present?
      %li.dropdown{style: 'float:right'}
        %a.dropdown-toggle{href: '#', :'data-toggle' => "dropdown"}
          = t('admin.misc.add_filter')
          %b.caret
        %ul.dropdown-menu#filters{style: 'left:auto; right:0;'}
          - @filterable_fields.each do |field|
            - field_options = case field.type
            - when :enum
              - 'options_for_select(field.with(object: @abstract_model.model.new).enum)'
            - else
              - ''
            %li
              %a{href: '#', :"data-field-label" => field.label, :"data-field-name" => field.name, :"data-field-options" => field_options.html_safe, :"data-field-type" => field.type, :"data-field-value" => ""}= field.label

  #list
    %script
      jQuery(function($) {
      $.filters.options.regional = {
      datePicker: {
      dateFormat: #{raw I18n.t("admin.misc.filter_date_format", default: I18n.t("admin.misc.filter_date_format", locale: :en)).to_json},
      dayNames: #{raw RailsAdmin::Config::Fields::Types::Datetime.day_names.to_json},
      dayNamesShort: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_day_names.to_json},
      dayNamesMin: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_day_names.to_json},
      firstDay: "1",
      monthNames: #{raw RailsAdmin::Config::Fields::Types::Datetime.month_names.to_json},
      monthNamesShort: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_month_names.to_json}
      }
      }

      = @ordered_filter_string

      });
    %style
      - properties.select{ |p| p.column_width.present? }.each do |property|
        = "#list th.#{property.css_class} { width: #{property.column_width}px; min-width: #{property.column_width}px; }"
        = "#list td.#{property.css_class} { max-width: #{property.column_width}px; }"
    = form_tag(index_path(params.except(*%w[page f query])), method: :get, class: "pjax-form form-inline") do
      .well
        %span#filters_box
        %hr.filters_box{style: "display:#{@ordered_filters.empty? ? 'none' : 'block'}"}
          Choose an account to export
        - if export_action
          %span{style: 'float:right'}= link_to wording_for(:link, export_action), export_path(params.except('set').except('page')), class: 'btn btn-info'

    = form_tag bulk_action_path(model_name: @abstract_model.to_param), method: :post, id: "bulk_form", class: "form" do
      = hidden_field_tag :bulk_action
      %table.table.table-condensed.table-striped
        %thead
          %tr
            %th.shrink
              %input.toggle{type: "checkbox"}
            - if other_left
              %th.other.left.shrink= "..."
            - properties.each do |property|
              - selected = (sort == property.name.to_s)
              - if property.sortable
                - sort_location = index_path params.except('sort_reverse').except('page').merge(sort: property.name).merge(selected && sort_reverse != "true" ? {sort_reverse: "true"} : {})
                - sort_direction = (sort_reverse == 'true' ? "headerSortUp" : "headerSortDown" if selected)
              %th{class: "#{property.sortable && "header pjax" || nil} #{sort_direction if property.sortable && sort_direction} #{property.css_class} #{property.type_css_class}", :'data-href' => (property.sortable && sort_location), rel: "tooltip", title: "#{property.hint}"}= property.label
            - if other_right
              %th.other.right.shrink= "..."
            %th.last.shrink
        %tbody
- elsif @abstract_model.model==TweetMetric && params["f"].present? && params["f"]["account"].nil?
  :ruby
    require 'rails_admin/config/fields/types/datetime.rb'
    query = params[:query]
    params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)
    params.delete(:query) if params[:query].blank?
    params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'
    sort_reverse = params[:sort_reverse]
    sort = params[:sort]
    params.delete(:sort) if params[:sort] == @model_config.list.sort_by.to_s

    export_action = RailsAdmin::Config::Actions.find(:export, { controller: self.controller, abstract_model: @abstract_model })
    export_action = nil unless export_action && authorized?(export_action.authorization_key, @abstract_model)

    properties = @model_config.list.with(controller: self.controller, view: self, object: @abstract_model.model.new).visible_fields
    # columns paginate
    @filterable_fields = @model_config.list.fields.select(&:filterable?)
    sets = get_column_sets(properties)
    properties = sets[params[:set].to_i] || []
    other_left = ((params[:set].to_i - 1) >= 0) && sets[params[:set].to_i - 1].present?
    other_right = sets[params[:set].to_i + 1].present?
    @index = 0
    @ordered_filters = (params[:f] || @model_config.list.filters).inject({}) { |memo, filter|
      field_name = filter.is_a?(Array) ? filter.first : filter
    (filter.is_a?(Array) ? filter.last : { (@index += 1) => { "v" => '' } }) .each do |index, filter_hash|
        unless filter_hash['disabled']
          memo[index] = { field_name => filter_hash }
        else
          params[:f].delete(field_name)
        end
      end
      memo
    }.to_a.sort_by(&:first)

    @ordered_filter_string = @ordered_filters.map do |duplet|
      filter_index = duplet[0]
      filter_for_field = duplet[1]
      filter_name = filter_for_field.keys.first
      filter_hash = filter_for_field.values.first
      field = @filterable_fields.find{ |field| field.name == filter_name.to_sym }
      field_options = case field.type
      when :enum
        options_for_select(field.with(object: @abstract_model.model.new).enum, filter_hash['v'])
      else
        ''
      end
      %{
        $.filters.append(#{field.label.to_json}, #{field.name.to_json}, #{field.type.to_json}, #{filter_hash['v'].to_json}, #{filter_hash['o'].to_json}, #{field_options.to_json}, #{filter_index.to_json});
      }
    end.join.html_safe if @ordered_filters


  = content_for :contextual_tabs do
    = bulk_menu
    - if @filterable_fields.present?
      %li.dropdown{style: 'float:right'}
        %a.dropdown-toggle{href: '#', :'data-toggle' => "dropdown"}
          = t('admin.misc.add_filter')
          %b.caret
        %ul.dropdown-menu#filters{style: 'left:auto; right:0;'}
          - @filterable_fields.each do |field|
            - field_options = case field.type
            - when :enum
              - 'options_for_select(field.with(object: @abstract_model.model.new).enum)'
            - else
              - ''
            %li
              %a{href: '#', :"data-field-label" => field.label, :"data-field-name" => field.name, :"data-field-options" => field_options.html_safe, :"data-field-type" => field.type, :"data-field-value" => ""}= field.label

  #list
    %script
      jQuery(function($) {
      $.filters.options.regional = {
      datePicker: {
      dateFormat: #{raw I18n.t("admin.misc.filter_date_format", default: I18n.t("admin.misc.filter_date_format", locale: :en)).to_json},
      dayNames: #{raw RailsAdmin::Config::Fields::Types::Datetime.day_names.to_json},
      dayNamesShort: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_day_names.to_json},
      dayNamesMin: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_day_names.to_json},
      firstDay: "1",
      monthNames: #{raw RailsAdmin::Config::Fields::Types::Datetime.month_names.to_json},
      monthNamesShort: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_month_names.to_json}
      }
      }

      = @ordered_filter_string

      });
    %style
      - properties.select{ |p| p.column_width.present? }.each do |property|
        = "#list th.#{property.css_class} { width: #{property.column_width}px; min-width: #{property.column_width}px; }"
        = "#list td.#{property.css_class} { max-width: #{property.column_width}px; }"
    = form_tag(index_path(params.except(*%w[page f query])), method: :get, class: "pjax-form form-inline") do
      .well
        %span#filters_box
        %hr.filters_box{style: "display:#{@ordered_filters.empty? ? 'none' : 'block'}"}
          Choose an account to export
        - if export_action
          %span{style: 'float:right'}= link_to wording_for(:link, export_action), export_path(params.except('set').except('page')), class: 'btn btn-info'

    = form_tag bulk_action_path(model_name: @abstract_model.to_param), method: :post, id: "bulk_form", class: "form" do
      = hidden_field_tag :bulk_action
      %table.table.table-condensed.table-striped
        %thead
          %tr
            %th.shrink
              %input.toggle{type: "checkbox"}
            - if other_left
              %th.other.left.shrink= "..."
            - properties.each do |property|
              - selected = (sort == property.name.to_s)
              - if property.sortable
                - sort_location = index_path params.except('sort_reverse').except('page').merge(sort: property.name).merge(selected && sort_reverse != "true" ? {sort_reverse: "true"} : {})
                - sort_direction = (sort_reverse == 'true' ? "headerSortUp" : "headerSortDown" if selected)
              %th{class: "#{property.sortable && "header pjax" || nil} #{sort_direction if property.sortable && sort_direction} #{property.css_class} #{property.type_css_class}", :'data-href' => (property.sortable && sort_location), rel: "tooltip", title: "#{property.hint}"}= property.label
            - if other_right
              %th.other.right.shrink= "..."
            %th.last.shrink
        %tbody
- else
  = form_tag export_path(params.merge(all: true)), method: 'post', class: 'form-horizontal denser' do

    %input{name: "send_data", type: "hidden", value: "true"}/
    %fieldset{id: 'fields_to_export'}
      %div.control-group
        %div.controls
          %label.checkbox{for: 'check_all'}
            = t('admin.export.select_all_fields')
            = check_box_tag 'all', 'all', true, { id: 'check_all' }
      %legend
        %i.icon-chevron-down
        = t('admin.export.select')
      .control-group
        %label.control-label{rel: 'tooltip', :'data-original-title' => t('admin.export.click_to_reverse_selection'), onclick: 'jQuery(this).siblings(".controls").find("input").click()'}= t('admin.export.fields_from', name: @model_config.label_plural.downcase)
        .controls
          - visible_fields.select{ |f| !f.association? }.each do |field|
            - list = field.virtual? ? 'methods' : 'only'
            - if field.association? && field.association.polymorphic?
              %label.checkbox{for: "schema_#{list}_#{field.method_name}"}
                = check_box_tag "schema[#{list}][]", field.method_name, true, { id: "schema_#{list}_#{field.method_name}" }
                = field.label + " [id]"
              - polymorphic_type_column_name = @abstract_model.properties.find {|p| field.association.foreign_type == p.name }.name
              %label.checkbox{for: "schema_#{list}_#{polymorphic_type_column_name}"}
                = check_box_tag "schema[#{list}][]", polymorphic_type_column_name, true, { id: "schema_#{list}_#{polymorphic_type_column_name}" }
                = field.label + " [type]"
            - else
              %label.checkbox{for: "schema_#{list}_#{field.name}"}
                = check_box_tag "schema[#{list}][]", field.name, true, { id: "schema_#{list}_#{field.name}" }
                = field.label

      - visible_fields.select{ |f| f.association? }.each do |field|
        - fields = field.associated_model_config.export.with(controller: self.controller, view: self, object: (associated_model = field.associated_model_config.abstract_model.model).new).visible_fields.select{ |f| !f.association? }
        .control-group
          %label.control-label{rel: 'tooltip', :'data-original-title' => t('admin.export.click_to_reverse_selection'), onclick: 'jQuery(this).siblings(".controls").find("input").click()'}= t('admin.export.fields_from_associated', name: field.label.downcase)
          .controls
            - fields.each do |associated_model_field|
              - list = associated_model_field.virtual? ? 'methods' : 'only'
              %label.checkbox{for: "schema_include_#{field.name}_#{list}_#{associated_model_field.name}"}
                = check_box_tag "schema[include][#{field.name}][#{list}][]", associated_model_field.name, true, { id: "schema_include_#{field.name}_#{list}_#{associated_model_field.name}" }
                = associated_model_field.label

    %fieldset
      %legend
        %i.icon-chevron-down
        = t('admin.export.options_for', name: 'csv')
      .control-group
        - guessed_encoding = @abstract_model.encoding
        %label.control-label{for: "csv_options_encoding_to"}= t('admin.export.csv.encoding_to')
        .controls
          -# from http://books.google.com/support/partner/bin/answer.py?answer=30990 :
          = select_tag 'csv_options[encoding_to]', options_for_select(["", "UTF-8", "UTF-16LE", "UTF-16BE", "UTF-32LE", "UTF-32BE", "UTF-7", "ISO-8859-1", "ISO-8859-15", "IBM-850", "MacRoman", "Windows-1252", "ISO-8859-3", "IBM-852", "ISO-8859-2", "MacCE", "Windows-1250", "IBM-855", "ISO-8859-5", "ISO-IR-111", "KOI8-R", "MacCyrillic", "Windows-1251", "CP-866", "KOI-U", "MacUkranian", "GB2312", "GBK", "GB18030", "HZ", "ISO-2022-CN", "Big5", "Big5-HKSCS", "EUC-TW", "EUC-JP", "ISO-2022-JP", "Shift_JIS", "EUC-KR", "UHC", "JOHAB", "ISO-2022-KR"])
          %p.help-block= t('admin.export.csv.encoding_to_help', name: guessed_encoding)

      .control-group
        %label.control-label{for: "csv_options_skip_header"}= t('admin.export.csv.skip_header')
        .controls
          = check_box_tag 'csv_options[skip_header]', 'true'
          %p.help-block= t('admin.export.csv.skip_header_help')

      .control-group
        %label.control-label{for: "csv_options_generator_col_sep"}= t('admin.export.csv.col_sep')
        .controls
          = select_tag 'csv_options[generator][col_sep]', options_for_select({ '' => t('admin.export.csv.default_col_sep'), "<comma> ','" => ',', "<semicolon> ';'" => ';', '<tabs>' => "'\t'" })
          %p.help-block= t('admin.export.csv.col_sep_help', value: t('admin.export.csv.default_col_sep'))

    .form-actions
      %input{type: :hidden, name: 'return_to', value: (params[:return_to].presence || request.referer)}
      %button.btn.btn-primary{type: "submit", name: 'csv'}
        %i.icon-white.icon-ok
        = t("admin.export.confirmation", name: 'csv')
      %button.btn.btn-info{type: "submit", name: 'json'}
        = t("admin.export.confirmation", name: 'json')
      %button.btn.btn-info{type: "submit", name: 'xml'}
        = t("admin.export.confirmation", name: 'xml')
      %button.btn{type: "submit", name: "_continue"}
        %i.icon-remove
        = t("admin.form.cancel")